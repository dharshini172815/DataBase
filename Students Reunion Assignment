 ALUMNI MEET:
----------------

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| alumni_meet        |
| exercises          |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
6 rows in set (0.00 sec)

mysql> use alumni_meet;
Database changed

mysql> create table students(student_id int primary key auto_increment,
    -> name varchar(100),
    -> gender enum('male', 'female', 'other'),
    -> contact_info varchar(255));
Query OK, 0 rows affected (0.43 sec)

mysql> desc students;
+--------------+-------------------------------+------+-----+---------+----------------+
| Field        | Type                          | Null | Key | Default | Extra          |
+--------------+-------------------------------+------+-----+---------+----------------+
| student_id   | int                           | NO   | PRI | NULL    | auto_increment |
| name         | varchar(100)                  | YES  |     | NULL    |                |
| gender       | enum('male','female','other') | YES  |     | NULL    |                |
| contact_info | varchar(255)                  | YES  |     | NULL    |                |
+--------------+-------------------------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)

mysql> create table genres (genre_id int primary key auto_increment,
    -> genre_name varchar(100));
Query OK, 0 rows affected (0.39 sec)

mysql> desc genres;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| genre_id   | int          | NO   | PRI | NULL    | auto_increment |
| genre_name | varchar(100) | YES  |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+
2 rows in set (0.00 sec)

mysql> create table student_movie_interests(student_id int,
    -> genre_id int,
    -> primary key (student_id, genre_id),
    -> foreign key (student_id) references students(student_id),
    -> foreign key (genre_id) references genres(genre_id));
Query OK, 0 rows affected (0.86 sec)

mysql> desc student_movie_interests;
+------------+------+------+-----+---------+-------+
| Field      | Type | Null | Key | Default | Extra |
+------------+------+------+-----+---------+-------+
| student_id | int  | NO   | PRI | NULL    |       |
| genre_id   | int  | NO   | PRI | NULL    |       |
+------------+------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> create table shopping_malls(mall_id int primary key auto_increment,
    -> mall_name varchar(100),
    -> location varchar(100));
Query OK, 0 rows affected (0.53 sec)

mysql> desc shopping_malls;
+-----------+--------------+------+-----+---------+----------------+
| Field     | Type         | Null | Key | Default | Extra          |
+-----------+--------------+------+-----+---------+----------------+
| mall_id   | int          | NO   | PRI | NULL    | auto_increment |
| mall_name | varchar(100) | YES  |     | NULL    |                |
| location  | varchar(100) | YES  |     | NULL    |                |
+-----------+--------------+------+-----+---------+----------------+
3 rows in set (0.01 sec)

mysql> create table beaches(beach_id int primary key auto_increment,
    -> beach_name varchar(100),
    -> location varchar(100));
Query OK, 0 rows affected (0.96 sec)

mysql> desc beaches;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| beach_id   | int          | NO   | PRI | NULL    | auto_increment |
| beach_name | varchar(100) | YES  |     | NULL    |                |
| location   | varchar(100) | YES  |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+
3 rows in set (0.04 sec)

mysql> create table movies(movie_id int primary key auto_increment,
    -> movie_name varchar(100),
    -> hero_name varchar(100),
    -> heroine_name varchar(100));
Query OK, 0 rows affected (0.54 sec)

mysql> desc movies;
+--------------+--------------+------+-----+---------+----------------+
| Field        | Type         | Null | Key | Default | Extra          |
+--------------+--------------+------+-----+---------+----------------+
| movie_id     | int          | NO   | PRI | NULL    | auto_increment |
| movie_name   | varchar(100) | YES  |     | NULL    |                |
| hero_name    | varchar(100) | YES  |     | NULL    |                |
| heroine_name | varchar(100) | YES  |     | NULL    |                |
+--------------+--------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

mysql> create table student_favorites(student_id int primary key,
    -> favorite_actor varchar(100),
    -> favorite_actress varchar(100),
    -> foreign key (student_id) references students(student_id));
Query OK, 0 rows affected (1.11 sec)

mysql> desc student_favorites;
+------------------+--------------+------+-----+---------+-------+
| Field            | Type         | Null | Key | Default | Extra |
+------------------+--------------+------+-----+---------+-------+
| student_id       | int          | NO   | PRI | NULL    |       |
| favorite_actor   | varchar(100) | YES  |     | NULL    |       |
| favorite_actress | varchar(100) | YES  |     | NULL    |       |
+------------------+--------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> create table student_fav_malls(student_id int,
    -> mall_id int,
    -> primary key (student_id, mall_id),
    -> foreign key (student_id) references students(student_id),
    -> foreign key (mall_id) references shopping_malls(mall_id));
Query OK, 0 rows affected (0.84 sec)

mysql> desc student_fav_malls;
+------------+------+------+-----+---------+-------+
| Field      | Type | Null | Key | Default | Extra |
+------------+------+------+-----+---------+-------+
| student_id | int  | NO   | PRI | NULL    |       |
| mall_id    | int  | NO   | PRI | NULL    |       |
+------------+------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> CREATE TABLE student_fav_beaches (
    ->     student_id INT,
    ->     beach_id INT,
    ->     PRIMARY KEY (student_id, beach_id),
    ->     FOREIGN KEY (student_id) REFERENCES students(student_id),
    ->     FOREIGN KEY (beach_id) REFERENCES beaches(beach_id)
    -> );
Query OK, 0 rows affected (1.12 sec)

mysql> desc student_fav_beaches;
+------------+------+------+-----+---------+-------+
| Field      | Type | Null | Key | Default | Extra |
+------------+------+------+-----+---------+-------+
| student_id | int  | NO   | PRI | NULL    |       |
| beach_id   | int  | NO   | PRI | NULL    |       |
+------------+------+------+-----+---------+-------+
2 rows in set (0.01 sec)


mysql> create table student_fav_movies(student_id int,
    -> movie_id int,
    -> primary key(student_id, movie_id),
    -> foreign key(student_id) references students(student_id),
    -> foreign key(movie_id) references movies(movie_id));
Query OK, 0 rows affected (0.61 sec)

mysql> desc student_fav_movies;
+------------+------+------+-----+---------+-------+
| Field      | Type | Null | Key | Default | Extra |
+------------+------+------+-----+---------+-------+
| student_id | int  | NO   | PRI | NULL    |       |
| movie_id   | int  | NO   | PRI | NULL    |       |
+------------+------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> insert into students (name, gender, contact_info) values
    -> ('Geetha', 'female','geetha@gmail.com'),
    -> ('sanjay', 'male', 'sanjay@gmail.com'),
    -> ('sakthi','female', 'sakthi@gmail.com'),
    -> ('murugesh','male','murugesh@gmail.com'),
    -> ('priya','female','priya@gmail.com'),
    -> ('prema','female','prema@gmail.com');
Query OK, 6 rows affected (0.13 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select*from students;
+------------+----------+--------+--------------------+
| student_id | name     | gender | contact_info       |
+------------+----------+--------+--------------------+
|          1 | Geetha   | female | geetha@gmail.com   |
|          2 | sanjay   | male   | sanjay@gmail.com   |
|          3 | sakthi   | female | sakthi@gmail.com   |
|          4 | murugesh | male   | murugesh@gmail.com |
|          5 | priya    | female | priya@gmail.com    |
|          6 | prema    | female | prema@gmail.com    |
+------------+----------+--------+--------------------+
6 rows in set (0.00 sec)

mysql> insert into genres(genre_name) values
    -> ('Action'),
    -> ('Comedy'),
    -> ('Drama'),
    -> ('Horror'),
    -> ('Love'),
    -> ('Sci-fi');
Query OK, 6 rows affected (0.08 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select*from genres;
+----------+------------+
| genre_id | genre_name |
+----------+------------+
|        1 | Action     |
|        2 | Comedy     |
|        3 | Drama      |
|        4 | Horror     |
|        5 | Love       |
|        6 | Sci-fi     |
+----------+------------+
6 rows in set (0.00 sec)

mysql> insert into student_movie_interests values
    -> (1,5),
    -> (1,2),
    -> (2,1),
    -> (2,6),
    -> (3,2),
    -> (3,5),
    -> (4,3),
    -> (4,5),
    -> (5,4),
    -> (5,2),
    -> (6,6),
    -> (6,1);
Query OK, 12 rows affected (0.17 sec)
Records: 12  Duplicates: 0  Warnings: 0

mysql> select*from student_movie_interests;
+------------+----------+
| student_id | genre_id |
+------------+----------+
|          2 |        1 |
|          6 |        1 |
|          1 |        2 |
|          3 |        2 |
|          5 |        2 |
|          4 |        3 |
|          5 |        4 |
|          1 |        5 |
|          3 |        5 |
|          4 |        5 |
|          2 |        6 |
|          6 |        6 |
+------------+----------+
12 rows in set (0.00 sec)

mysql> insert into shopping_malls(mall_name, location) values
    -> ('Royal', 'Siruseri'),
    -> ('Trendz', 'Thaambaram'),
    -> ('Saravana stores', 'Perundhurai'),
    -> ('Glitz', 'Chennai');
Query OK, 4 rows affected (0.08 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> select*from shopping_malls;
+---------+-----------------+-------------+
| mall_id | mall_name       | location    |
+---------+-----------------+-------------+
|       1 | Royal           | Siruseri    |
|       2 | Trendz          | Thaambaram  |
|       3 | Saravana stores | Perundhurai |
|       4 | Glitz           | Chennai     |
+---------+-----------------+-------------+
4 rows in set (0.00 sec)

mysql> insert into beaches(beach_name, location) values
    -> ('Marina beach','chennai'),
    -> ('Thiruvanmiyur beach', 'chennai'),
    -> ('besant nagar beach', 'chennai');
Query OK, 3 rows affected (0.09 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> select * from beaches;
+----------+---------------------+----------+
| beach_id | beach_name          | location |
+----------+---------------------+----------+
|        1 | Marina beach        | chennai  |
|        2 | Thiruvanmiyur beach | chennai  |
|        3 | besant nagar beach  | chennai  |
+----------+---------------------+----------+
3 rows in set (0.00 sec)

mysql> insert into movies(movie_name, hero_name, heroine_name) values
    -> ('GOAT', 'Vijay','Sneha'),
    -> ('Dragon', 'Pradeep', 'Ivana'),
    -> ('Sachin', 'Vijay', 'Jenilia'),
    -> ('Kuruvi', 'Vijay', 'Trisha'),
    -> ('Billa', 'Ajith', 'Nayanthara');
Query OK, 5 rows affected (0.13 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select*from movies;
+----------+------------+-----------+--------------+
| movie_id | movie_name | hero_name | heroine_name |
+----------+------------+-----------+--------------+
|        1 | GOAT       | Vijay     | Sneha        |
|        2 | Dragon     | Pradeep   | Ivana        |
|        3 | Sachin     | Vijay     | Jenilia      |
|        4 | Kuruvi     | Vijay     | Trisha       |
|        5 | Billa      | Ajith     | Nayanthara   |
+----------+------------+-----------+--------------+
5 rows in set (0.00 sec)

mysql> insert into student_favorites values
    -> (1, 'Vijay', 'Trisha'),
    -> (2, 'Surya', 'Anjali'),
    -> (3, 'Ajith', 'Nayanthara'),
    -> (4, 'Dhanush', 'Trisha'),
    -> (5, 'Vijay', 'Samantha'),
    -> (6, 'Surya', 'Asin');
Query OK, 6 rows affected (0.08 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> select*from student_favorites;
+------------+----------------+------------------+
| student_id | favorite_actor | favorite_actress |
+------------+----------------+------------------+
|          1 | Vijay          | Trisha           |
|          2 | Surya          | Anjali           |
|          3 | Ajith          | Nayanthara       |
|          4 | Dhanush        | Trisha           |
|          5 | Vijay          | Samantha         |
|          6 | Surya          | Asin             |
+------------+----------------+------------------+
6 rows in set (0.00 sec)

mysql> insert into student_fav_malls values
    -> (1,2),
    -> (2,3),
    -> (2,4),
    -> (3,1),
    -> (4,1),
    -> (4,4),
    -> (5,2),
    -> (6,2),
    -> (6,3);
Query OK, 9 rows affected (0.08 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> select*from student_fav_malls;
+------------+---------+
| student_id | mall_id |
+------------+---------+
|          3 |       1 |
|          4 |       1 |
|          1 |       2 |
|          5 |       2 |
|          6 |       2 |
|          2 |       3 |
|          6 |       3 |
|          2 |       4 |
|          4 |       4 |
+------------+---------+
9 rows in set (0.00 sec)

mysql> INSERT INTO student_fav_beaches VALUES
    -> (1, 1),
    -> (1, 3),
    -> (2, 1),
    -> (3, 2),
    -> (4, 1),
    -> (4, 2),
    -> (5, 3),
    -> (6, 1),
    -> (6, 3);
Query OK, 9 rows affected (0.08 sec)
Records: 9  Duplicates: 0  Warnings: 0

mysql> select*from student_fav_beaches;
+------------+----------+
| student_id | beach_id |
+------------+----------+
|          1 |        1 |
|          2 |        1 |
|          4 |        1 |
|          6 |        1 |
|          3 |        2 |
|          4 |        2 |
|          1 |        3 |
|          5 |        3 |
|          6 |        3 |
+------------+----------+
9 rows in set (0.00 sec)

mysql> insert into student_fav_movies values
    -> (1, 2),
    -> (1, 5),
    -> (2, 1),
    -> (2, 3),
    -> (3, 4),
    -> (3, 5),
    -> (4, 1),
    -> (4, 2),
    -> (5, 1),
    -> (5, 3),
    -> (6, 5),
    -> (6, 3);
Query OK, 12 rows affected (0.09 sec)
Records: 12  Duplicates: 0  Warnings: 0

mysql> select*from student_fav_movies;
+------------+----------+
| student_id | movie_id |
+------------+----------+
|          2 |        1 |
|          4 |        1 |
|          5 |        1 |
|          1 |        2 |
|          4 |        2 |
|          2 |        3 |
|          5 |        3 |
|          6 |        3 |
|          3 |        4 |
|          1 |        5 |
|          3 |        5 |
|          6 |        5 |
+------------+----------+
12 rows in set (0.00 sec)

// Gets each students favorite actor and actress
-------------------------------------------------
mysql> select s.name, sf.favorite_actor, sf.favorite_actress
    -> from students s
    -> join student_favorites sf
    -> on s.student_id = sf.student_id;
+----------+----------------+------------------+
| name     | favorite_actor | favorite_actress |
+----------+----------------+------------------+
| Geetha   | Vijay          | Trisha           |
| sanjay   | Surya          | Anjali           |
| sakthi   | Ajith          | Nayanthara       |
| murugesh | Dhanush        | Trisha           |
| priya    | Vijay          | Samantha         |
| prema    | Surya          | Asin             |
+----------+----------------+------------------+
6 rows in set (0.00 sec)

//  List all students and their favorite movies:
-----------------------------------------------
mysql> select s.name as student_name, m.movie_name
    -> from student_fav_movies sfm
    -> join students s on sfm.student_id = s.student_id
    -> join movies m on sfm.movie_id = m.movie_id;
+--------------+------------+
| student_name | movie_name |
+--------------+------------+
| sanjay       | GOAT       |
| murugesh     | GOAT       |
| priya        | GOAT       |
| Geetha       | Dragon     |
| murugesh     | Dragon     |
| sanjay       | Sachin     |
| priya        | Sachin     |
| prema        | Sachin     |
| sakthi       | Kuruvi     |
| Geetha       | Billa      |
| sakthi       | Billa      |
| prema        | Billa      |
+--------------+------------+
12 rows in set (0.00 sec)

//  List students and the malls they like:
------------------------------------------
mysql> select s.name as student_name, sm.mall_name
    -> from student_fav_malls sfm
    -> join students s on sfm.student_id = s.student_id
    -> join shopping_malls sm on sfm.mall_id = sm.mall_id;
+--------------+-----------------+
| student_name | mall_name       |
+--------------+-----------------+
| sakthi       | Royal           |
| murugesh     | Royal           |
| Geetha       | Trendz          |
| priya        | Trendz          |
| prema        | Trendz          |
| sanjay       | Saravana stores |
| prema        | Saravana stores |
| sanjay       | Glitz           |
| murugesh     | Glitz           |
+--------------+-----------------+
9 rows in set (0.00 sec)

// Get all genres a student is interested in:
---------------------------------------------
mysql> select s.name as student_name, g.genre_name
    -> from student_movie_interests smi
    -> join students s on smi.student_id = s.student_id
    -> join genres g on smi.genre_id = g.genre_id;
+--------------+------------+
| student_name | genre_name |
+--------------+------------+
| Geetha       | Comedy     |
| Geetha       | Love       |
| sanjay       | Action     |
| sanjay       | Sci-fi     |
| sakthi       | Comedy     |
| sakthi       | Love       |
| murugesh     | Drama      |
| murugesh     | Love       |
| priya        | Comedy     |
| priya        | Horror     |
| prema        | Action     |
| prema        | Sci-fi     |
+--------------+------------+
12 rows in set (0.00 sec)

//  Show each student’s favorite beaches:
-----------------------------------------
mysql> select s.name as student_name, b.beach_name
    -> from student_fav_beaches sfb
    -> join students s on sfb.student_id = s.student_id
    -> join beaches b on sfb.beach_id = b.beach_id;
+--------------+---------------------+
| student_name | beach_name          |
+--------------+---------------------+
| Geetha       | Marina beach        |
| sanjay       | Marina beach        |
| murugesh     | Marina beach        |
| prema        | Marina beach        |
| sakthi       | Thiruvanmiyur beach |
| murugesh     | Thiruvanmiyur beach |
| Geetha       | besant nagar beach  |
| priya        | besant nagar beach  |
| prema        | besant nagar beach  |
+--------------+---------------------+
9 rows in set (0.00 sec)

// Students With same interest
-------------------------------------
mysql> select g.genre_name, GROUP_CONCAT(s.name order by s.name SEPARATOR ', ') as students_with_same_interest
    -> from student_movie_interests smi
    -> join students s on smi.student_id = s.student_id
    -> join genres g on smi.genre_id = g.genre_id
    -> group by g.genre_name;
+------------+-----------------------------+
| genre_name | students_with_same_interest |
+------------+-----------------------------+
| Action     | prema, sanjay               |
| Comedy     | Geetha, priya, sakthi       |
| Drama      | murugesh                    |
| Horror     | priya                       |
| Love       | Geetha, murugesh, sakthi    |
| Sci-fi     | prema, sanjay               |
+------------+-----------------------------+
6 rows in set (0.00 sec)


//Group Students by Favorite Actor or Actress (Fan Clubs)
---------------------------------------------------------
mysql> select favorite_actor, GROUP_CONCAT(s.name) as fans
    -> from student_favorites sf 
    -> join students s
    -> on sf.student_id = s.student_id
    -> group by favorite_actor;
+----------------+--------------+
| favorite_actor | fans         |
+----------------+--------------+
| Ajith          | sakthi       |
| Dhanush        | murugesh     |
| Surya          | sanjay,prema |
| Vijay          | Geetha,priya |
+----------------+--------------+
4 rows in set (0.00 sec)

mysql> select favorite_actress, GROUP_CONCAT(s.name) as fans
    -> from student_favorites sf
    -> join students s
    -> on sf.student_id = s.student_id
    -> group by favorite_actress;
+------------------+-----------------+
| favorite_actress | fans            |
+------------------+-----------------+
| Anjali           | sanjay          |
| Asin             | prema           |
| Nayanthara       | sakthi          |
| Samantha         | priya           |
| Trisha           | Geetha,murugesh |
+------------------+-----------------+
5 rows in set (0.00 sec)

// students who likes beach
---------------------------
mysql> select b.beach_name, GROUP_CONCAT(s.name order by s.name) as students_who_like_beach
    -> from student_fav_beaches sfb
    -> join beaches b on b.beach_id = sfb.beach_id
    -> join students s on s.student_id = sfb.student_id
    -> group by b.beach_name;
+---------------------+------------------------------+
| beach_name          | students_who_like_beach      |
+---------------------+------------------------------+
| Besant nagar beach  | Geetha,prema,priya           |
| Marina beach        | Geetha,murugesh,prema,sanjay |
| Thiruvanmiyur beach | murugesh,sakthi              |
+---------------------+------------------------------+
3 rows in set (0.00 sec)

// Suggest ideal friend groups who share similar tastes in entertainment and hangout spots
------------------------------------------------------------------------------------------
mysql> SELECT
    ->     GROUP_CONCAT(s.name) AS student_names,
    ->     sm.mall_name,
    ->     b.beach_name,
    ->     m.movie_name
    -> FROM students s
    -> JOIN student_fav_malls sfm ON s.student_id = sfm.student_id
    -> JOIN student_fav_beaches sfb ON s.student_id = sfb.student_id
    -> JOIN student_fav_movies sfmv ON s.student_id = sfmv.student_id
    -> JOIN shopping_malls sm ON sm.mall_id = sfm.mall_id
    -> JOIN beaches b ON b.beach_id = sfb.beach_id
    -> JOIN movies m ON m.movie_id = sfmv.movie_id
    -> GROUP BY sfm.mall_id, sfb.beach_id, sfmv.movie_id
    -> HAVING COUNT(*) >= 2;
+-----------------+-----------------+--------------------+------------+
| student_names   | mall_name       | beach_name         | movie_name |
+-----------------+-----------------+--------------------+------------+
| Geetha,prema    | Trendz          | Marina beach       | Billa      |
| priya,prema     | Trendz          | Besant nagar beach | Sachin     |
| Geetha,prema    | Trendz          | Besant nagar beach | Billa      |
| prema,sanjay    | Saravana stores | Marina beach       | Sachin     |
| sanjay,murugesh | Glitz           | Marina beach       | GOAT       |
+-----------------+-----------------+--------------------+------------+
5 rows in set (0.01 sec)


// Personalized Meetup Suggestions
----------------------------------
Recommend where two or more students can spend time together based on:

Common favorite beaches
-----------------------
mysql> select b.beach_name, GROUP_CONCAT(s.name order by s.name SEPARATOR ', ' ) as students
    -> from student_fav_beaches sb
    -> join beaches b on sb.beach_id = b.beach_id
    -> join students s on sb.student_id = s.student_id
    -> group by b.beach_name
    -> having count(*) >= 2;
+---------------------+---------------------------------+
| beach_name          | students                        |
+---------------------+---------------------------------+
| Besant nagar beach  | Geetha, prema, priya            |
| Marina beach        | Geetha, murugesh, prema, sanjay |
| Thiruvanmiyur beach | murugesh, sakthi                |
+---------------------+---------------------------------+
3 rows in set (0.00 sec)

Common favorite malls
---------------------
mysql> select m.mall_name, GROUP_CONCAT(s.name order by s.name SEPARATOR ', ') as students
    -> from student_fav_malls sm
    -> join shopping_malls m on sm.mall_id = m.mall_id
    -> join students s on sm.student_id = s.student_id
    -> group by m.mall_name
    -> having count(*) > 2;
+-----------+----------------------+
| mall_name | students             |
+-----------+----------------------+
| Trendz    | Geetha, prema, priya |
+-----------+----------------------+
1 row in set (0.00 sec)

Common favorite movies
----------------------
mysql> select mv.movie_name, GROUP_CONCAT(s.name ORDER BY s.name SEPARATOR ', ') as students
    -> from student_fav_movies sf
    -> join movies mv ON sf.movie_id = mv.movie_id
    -> join students s ON sf.student_id = s.student_id
    -> group by mv.movie_name
    -> having COUNT(*) >= 2;
+------------+-------------------------+
| movie_name | students                |
+------------+-------------------------+
| Billa      | Geetha, prema, sakthi   |
| Dragon     | Geetha, murugesh        |
| GOAT       | murugesh, priya, sanjay |
| Sachin     | prema, priya, sanjay    |
+------------+-------------------------+
4 rows in set (0.00 sec)

// Most liked actor/actress
---------------------------
mysql> select favorite_actor, count(*) as likes
    -> from student_favorites
    -> group by favorite_actor
    -> order by likes desc
    -> limit 1;
+----------------+-------+
| favorite_actor | likes |
+----------------+-------+
| Vijay          |     2 |
+----------------+-------+
1 row in set (0.00 sec)

mysql> select favorite_actress, count(*) as likes
    -> from student_favorites
    -> group by favorite_actress
    -> order by likes desc
    -> limit 1;
+------------------+-------+
| favorite_actress | likes |
+------------------+-------+
| Trisha           |     2 |
+------------------+-------+
1 row in set (0.00 sec)

// Most popular movie genre among the class
-------------------------------------------
mysql> select g.genre_name, count(*) as interested_students
    -> from student_movie_interests smi
    -> join genres g on smi.genre_id = g.genre_id
    -> group by g.genre_name
    -> order by interested_students desc
    -> limit 1;
+------------+---------------------+
| genre_name | interested_students |
+------------+---------------------+
| Comedy     |                   3 |
+------------+---------------------+
1 row in set (0.00 sec)

// Top 5 favorite movies currently
----------------------------------
mysql> select m.movie_name, count(*) as favorites
    -> from student_fav_movies sf
    -> join movies m on sf.movie_id = m.movie_id
    -> group by m.movie_name
    -> order by favorites desc, m.movie_name
    -> limit 5;
+------------+-----------+
| movie_name | favorites |
+------------+-----------+
| Billa      |         3 |
| GOAT       |         3 |
| Sachin     |         3 |
| Dragon     |         2 |
| Kuruvi     |         1 |
+------------+-----------+
5 rows in set (0.00 sec)

// Who loves romantic movies?
-----------------------------
mysql> select s.name from student_movie_interests smi
    -> join students s on smi.student_id = s.student_id
    -> where smi.genre_id = (select genre_id from genres where genre_name = 'Love');
+----------+
| name     |
+----------+
| Geetha   |
| sakthi   |
| murugesh |
+----------+
3 rows in set (0.00 sec)

// Which beach is the most popular?
------------------------------------
mysql> select b.beach_name, count(*) as fans
    -> from student_fav_beaches sb
    -> join beaches b on sb.beach_id = b.beach_id
    -> group by b.beach_name 
    -> order by fans desc
    -> limit 1;
+--------------+------+
| beach_name   | fans |
+--------------+------+
| Marina beach |    4 |
+--------------+------+
1 row in set (0.00 sec)

// What are the top favorite actors?
------------------------------------
mysql> select favorite_actor, count(*) as likes
    -> from student_favorites
    -> group by favorite_actor
    -> order by likes desc
    -> limit 3;
+----------------+-------+
| favorite_actor | likes |
+----------------+-------+
| Vijay          |     2 |
| Surya          |     2 |
| Ajith          |     1 |
+----------------+-------+
3 rows in set (0.00 sec)

// Which movie can most people agree on watching together?
-----------------------------------------------------------
mysql> select m.movie_name, count(*) as fan_count
    -> from student_fav_movies sf
    -> join movies m on sf.movie_id = m.movie_id
    -> group by m.movie_name
    -> order by fan_count desc
    -> limit 1;
+------------+-----------+
| movie_name | fan_count |
+------------+-----------+
| GOAT       |         3 |
+------------+-----------+
1 row in set (0.00 sec)
